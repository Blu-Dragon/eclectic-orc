methodWrite(schemaColumn, sclass) ::= <<
    protected void write(Object inputRow) {
        <sclass.name> datum = (<sclass.name>)inputRow;
        <if(schemaColumn.delegateClass)>
                <schemaColumn.delegateClass.name> delegateInstance = new <schemaColumn.delegateClass.name>(datum);
        <endif>
        <writeStruct(schemaColumn)>
    }
>>

writeStruct(schemaColumn) ::= <<
    <schemaColumn.complexType.structChildren:writeColumn()>
>>

writeColumn(schemaColumn) ::= <<
    <if(schemaColumn.typeInfo.typeStruct)>
        <writeStruct(schemaColumn)>
    <else>
        {
            <schemaColumn.vectorClassName> vector = (<schemaColumn.vectorClassName>)vectorizedRowBatch.cols[<schemaColumn.columnIndex>];
            <delegateAwareWrite(schemaColumn, first(schemaColumn.accessorMethods), rest(schemaColumn.accessorMethods), "datum")>
        }
    <endif>
>>

delegateAwareWrite(schemaColumn, method, methods, var) ::= <<
    <if(schemaColumn.needsDelegate)>
        <nullSafeChainAccess(schemaColumn, method, methods, "delegateInstance")>
    <else>
        <nullSafeChainAccess(schemaColumn, method, methods, var)>
    <endif>
>>

nullSafeChainAccess(schemaColumn, method, methods, var) ::= <<
    <! This template unwinds a series of calls checking for null value in each stage to get the final value. !>
    <method.returnType.name> <schemaColumn.template.newTempVariable> = <var>.<method.name>();
    <if(methods)>
        if (<schemaColumn.template.tempVariable> == null) {
            setNull(vector);
        } else {
            <nullSafeChainAccess(schemaColumn, first(methods), rest(methods), schemaColumn.template.tempVariable)>
        }
    <else>
        <if(method.returnType.primitive)>
            <(schemaColumn.template.templateNameColumnSetter)(schemaColumn, "vector", schemaColumn.template.tempVariable, "vectorizedRowBatch.size")>
        <else>
            if (<schemaColumn.template.tempVariable> == null) {
                setNull(vector);
            } else {
                <(schemaColumn.template.templateNameColumnSetter)(schemaColumn, "vector", enumConvertedValue(schemaColumn, schemaColumn.template.tempVariable), "vectorizedRowBatch.size")>
            }
        <endif>
    <endif>
>>

enumConvertedValue(schemaColumn, value) ::= <<
    <if(schemaColumn.typeInfo.enum)><value>.<schemaColumn.template.enumMethod>()<else><convertedValue(schemaColumn, value)><endif>
>>

convertedValue(schemaColumn, value) ::= << <if(schemaColumn.converter)>new <schemaColumn.converter.class.name>().convert(<value>)<else><value><endif> >>

columnBinary(schemaColumn, var, val, loc) ::= <<
    // TODO
>>

columnBoolean(schemaColumn, var, val, loc) ::= <<
    <if(schemaColumn.primitiveVector)>
        <var>.vector[<loc>] = <val>.<schemaColumn.typeInfo.primitiveConversionMethod> ? 1 : 0;
    <else>
        <var>.vector[<loc>] = <val> ? 1 : 0;
    <endif>
>>

columnByte(schemaColumn, var, val, loc) ::= <<
    <columnLong(schemaColumn, var, val, loc)>
>>

columnChar(schemaColumn, var, val, loc) ::= <<
    byte[] charArray = new byte[1];
    <if(schemaColumn.primitiveVector)>
        charArray[0] = <val>.<schemaColumn.typeInfo.primitiveConversionMethod>;
    <else>
        charArray[0] = <val>;
    <endif>
    <var>.setVal(<loc>, charArray);
>>

columnDate(schemaColumn, var, val, loc) ::= <<
    <if(schemaColumn.typeInfo.typeLocalDate)>
        <var>.vector[<loc>] = <val>.toEpochDay();
    <else>
        <var>.vector[<loc>] = java.time.Instant.ofEpochMilli(<val>.getTime()).atZone(java.time.ZoneId.systemDefault()).toLocalDate().toEpochDay();
    <endif>
>>

columnDecimal(schemaColumn, var, val, loc) ::= <<
    <var>.set(<loc>, org.apache.hadoop.hive.common.type.HiveDecimal.create(<val>, false));
>>

columnDouble(schemaColumn, var, val, loc) ::= <<
    <if(schemaColumn.primitiveVector)>
        <var>.vector[<loc>] = <val>.<schemaColumn.typeInfo.primitiveConversionMethod>;
    <else>
        <var>.vector[<loc>] = <val>;
    <endif>
>>

columnFloat(schemaColumn, var, val, loc) ::= <<
    <columnDouble(schemaColumn, var, val, loc)>
>>

columnInt(schemaColumn, var, val, loc) ::= <<
    <columnLong(schemaColumn, var, val, loc)>
>>

columnList(schemaColumn, var, val, loc) ::= <<
    <if(schemaColumn.typeInfo.typeJavaList)>
        java.util.List list = <val>;
    <elseif(schemaColumn.typeInfo.typeJavaCollection)>
        java.util.List list = new java.util.ArrayList(<val>);
    <else>
        java.util.List list = new java.util.ArrayList();
        java.util.Iterator iterator = <val>.iterator();
        while (iterator.hasNext()) {
            list.add(iterator.next());
        }
    <endif>
    <var>.offsets[<loc>] = <var>.childCount;
    <var>.lengths[<loc>] = list.size();
    <var>.childCount += list.size();
    for (int i = 0; i \< list.size(); i++) {
        int location = <var>.offsets[<loc>] + i;
        <schemaColumn.complexType.listChild.VectorClassName> childVector = (<schemaColumn.complexType.listChild.VectorClassName>)<var>.child;
        <! If the list child has a converter, then we are trying to convert each element of the list. !>
        <if(schemaColumn.complexType.listChild.converter)>
            <schemaColumn.complexType.listChild.columnClassType.name> listElement = (<schemaColumn.complexType.listChild.columnClassType.name>)<convertedValue(schemaColumn.complexType.listChild, "list.get(i)")>;
            <(schemaColumn.complexType.listChild.template.templateNameColumnSetter)(schemaColumn.complexType.listChild, "childVector", "listElement", "location")>
        <else>
            <schemaColumn.complexType.listChild.columnClassType.name> listElement = (<schemaColumn.complexType.listChild.columnClassType.name>)list.get(i);
            <(schemaColumn.complexType.listChild.template.templateNameColumnSetter)(schemaColumn.complexType.listChild, "childVector", enumConvertedValue(schemaColumn.complexType.listChild, "listElement"), "location")>
        <endif>
    }
>>

columnLong(schemaColumn, var, val, loc) ::= <<
    <if(schemaColumn.primitiveVector)>
        <var>.vector[<loc>] = <val>.<schemaColumn.typeInfo.primitiveConversionMethod>;
    <else>
        <var>.vector[<loc>] = <val>;
    <endif>
>>

columnShort(schemaColumn, var, val, loc) ::= <<
    <columnLong(schemaColumn, var, val, loc)>
>>

columnString(schemaColumn, var, val, loc) ::= <<
    <var>.setVal(<loc>, <val>.getBytes());
>>

columnTimestamp(schemaColumn, var, val, loc) ::= <<
    <if(schemaColumn.typeInfo.typeZonedDateTime)>
        <var>.set(<loc>, java.sql.Timestamp.from(<val>.toInstant()));
    <elseif(schemaColumn.typeInfo.typeDateTime)>
        <var>.set(<loc>, new java.sql.Timestamp(<val>.getTime()));
    <else>
        <var>.set(<loc>, <val>);
    <endif>
>>

columnVarchar(schemaColumn, var, val, loc) ::= <<
    <columnString(schemaColumn, var, val, loc)>
>>